{
  "uid" : "436705ea6a1f0cd9",
  "name" : "get请求查询用户数据列表",
  "fullName" : "test.test_api.TestApi#test_main",
  "historyId" : "5fa6656b8b1b28bc1fdd0eb962f2b477",
  "time" : {
    "start" : 1606055460236,
    "stop" : 1606055460283,
    "duration" : 47
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test.test_api.TestApi object at 0x000001A9542ABD48>\ncase = ['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', ...]\n\n    @pytest.mark.parametrize('case', cases)\n    def test_main(self, case):\n        response, expect = BaseRequest.send_request(case)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应字典\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n>           assert actual == v\nE           AssertionError\n\n..\\tools\\data_process.py:95: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test.test_api.TestApi object at 0x000001A9542ABD48>\ncase = ['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', ...]\n\n    @pytest.mark.parametrize('case', cases)\n    def test_main(self, case):\n        response, expect = BaseRequest.send_request(case)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应字典\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            actual = extractor(response, k)\n            index += 1\n            logger.info(f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言',  f'实际结果:{actual} = 预期结果:{v}')\n>           assert actual == v\nE           AssertionError\n\n..\\tools\\data_process.py:95: AssertionError",
    "steps" : [ {
      "name" : "请求地址",
      "time" : {
        "start" : 1606055460236,
        "stop" : 1606055460237,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "6e4bcba54bda3946",
        "name" : "请求地址",
        "source" : "6e4bcba54bda3946.txt",
        "type" : "text/plain",
        "size" : 49
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1606055460237,
        "stop" : 1606055460238,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "59c76da54b827a66",
        "name" : "请求头",
        "source" : "59c76da54b827a66.txt",
        "type" : "text/plain",
        "size" : 220
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "请求参数",
      "time" : {
        "start" : 1606055460239,
        "stop" : 1606055460240,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "46917a47b8a7af93",
        "name" : "请求参数",
        "source" : "46917a47b8a7af93.txt",
        "type" : "text/plain",
        "size" : 59
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "上传文件",
      "time" : {
        "start" : 1606055460240,
        "stop" : 1606055460241,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ba33aedb2bbb85a5",
        "name" : "上传文件",
        "source" : "ba33aedb2bbb85a5.txt",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "响应耗时(s)",
      "time" : {
        "start" : 1606055460278,
        "stop" : 1606055460279,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "f893f8ad318ad5a",
        "name" : "响应耗时(s)",
        "source" : "f893f8ad318ad5a.txt",
        "type" : "text/plain",
        "size" : 8
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "响应内容",
      "time" : {
        "start" : 1606055460279,
        "stop" : 1606055460280,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "239d688273db524b",
        "name" : "响应内容",
        "source" : "239d688273db524b.txt",
        "type" : "text/plain",
        "size" : 93
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "存储实际响应",
      "time" : {
        "start" : 1606055460280,
        "stop" : 1606055460281,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "fedd4f4a4264b0c",
        "name" : "存储实际响应",
        "source" : "fedd4f4a4264b0c.txt",
        "type" : "text/plain",
        "size" : 2630
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    }, {
      "name" : "第1个断言",
      "time" : {
        "start" : 1606055460282,
        "stop" : 1606055460282,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "9814da59d05e4ba7",
        "name" : "第1个断言",
        "source" : "9814da59d05e4ba7.txt",
        "type" : "text/plain",
        "size" : 121
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "5253fd442429f739",
      "name" : "stderr",
      "source" : "5253fd442429f739.txt",
      "type" : "text/plain",
      "size" : 1265
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 8
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_api"
  }, {
    "name" : "subSuite",
    "value" : "TestApi"
  }, {
    "name" : "host",
    "value" : "DESKTOP-0T59F1A"
  }, {
    "name" : "thread",
    "value" : "7848-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_api"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\", \"msg\": &$.msg&}', '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "436705ea6a1f0cd9.json",
  "parameterValues" : [ "['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\", \"msg\": &$.msg&}', '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}']" ]
}